using UnityEngine;
using System.Collections;

public class pwalk : MonoBehaviour
{
	
	
	public Transform	tf;
	public Rigidbody	rb;
	public Animator		anim;
	public Transform	tfBody;
	public Transform	tfCam;
	
	// Use this for initialization
	void Start()
	{
		anim.SetLayerWeight( 1, 1.0f );
		
		physMove = walkMove;
		
		StartCoroutine( walking() );
	}
	
	static readonly int walk = Animator.StringToHash( "lower body.walk" );
	
	
	// Update is called once per frame
	void Update()
	{
		look();
		
	}
	
	
	float vAngle = 0.0f;
	
	void look()
	{
		var rv = Input.GetAxisRaw("rv");
		var rh = Input.GetAxisRaw("rh");
		
		var rotRatio = 200.0f * Time.deltaTime;
		
		tf.Rotate( new Vector3(0.0f, rh * rotRatio, 0.0f) );
		
		var sv = vAngle;
		vAngle = Mathf.Clamp( vAngle + rv * rotRatio, -90.0f, 90.0f );
		tfCam.RotateAround( tf.position, -tf.right, vAngle - sv );
		
		anim.SetFloat( "vAngle", vAngle );
	}
	
	IEnumerator walking()
	{
		yield return 0;
		
		physMove = walkMove;
		
		anim.SetInteger( "state", 0 );
		
		for(;;)
		{
			
			var lv = Input.GetAxisRaw("Vertical");
			var lh = Input.GetAxisRaw("Horizontal");
			
			var move = new Vector2( lv, lh );
			
			
			var dir = move.normalized;
			
			var wd = Vector2.Dot( dir, Vector2.up );
			
			anim.SetFloat( "walkDir", Mathf.Abs(wd) );
			
			
			var m = move.magnitude;
			
			anim.SetFloat( "walkSpeed", m );
			
			if( m > 0.0f )
			{
				anim.speed = m;
			}
			else
			{
				anim.speed = 1.0f;
			}
			
			
			if( Input.GetButtonDown("Jump") )
			{
				
				if( m > 0.0f )
				{
					
					avoRatio = 20.0f;//
					
					anim.SetInteger( "state", 2 );
					
					StartCoroutine( avoidancing() );
					
					break;
					
				}
				else
				{
					
					var ray = new Ray( tfBody.position + Vector3.up * 0.2f, Vector3.up * -0.2f );
					
					var res = Physics.Raycast( ray, 1.0f );//, ~(1<<8) );
					
					if( res )
					{
						rb.AddForce( Vector3.up * 8000.0f, ForceMode.Force );
					}
					
				}
				
			}
			
			yield return 0;
		}
		
		anim.speed = 1.0f;
	}
	
	
	IEnumerator avoidancing()
	{
		yield return 0;
		
		physMove = avoMove;
		
		var lv = Input.GetAxisRaw("Vertical");
		var lh = Input.GetAxisRaw("Horizontal");
		
		var mvh = new Vector2( lh, lv );
		var m = mvh.magnitude;
		var move = new Vector3( mvh.x, m * 0.5f, mvh.y );
		
		var rot = tf.rotation;
		
	//	rb.AddForce( rot * move * 200.0f, ForceMode.Force );
		rb.AddForce( Vector3.up * 5000.0f, ForceMode.Force );
		
		anim.transform.LookAt( tf.position + rot * new Vector3( lh, 0.0f, lv ) );
		
		
		for(;;)
		{
			
			
			if( anim.GetNextAnimatorStateInfo(0).nameHash == walk ) break;
			
			yield return 0;
		}
		
		
		anim.transform.localRotation = Quaternion.identity;
		
		anim.SetInteger( "state", 0 );
		
		StartCoroutine( walking() );
		
	}
	
	
	delegate void MoveFunc();
	
	MoveFunc	physMove;
	
	void walkMove()
	{
		var lv = Input.GetAxisRaw("Vertical");
		var lh = Input.GetAxisRaw("Horizontal");
		
		var rot = tf.rotation;
		
		var move = rot * new Vector3( lh, 0.0f, lv );
		
		var moveRatio = 3.0f;
		
		rb.MovePosition( rb.position + move * Time.deltaTime * moveRatio );
	}
	
	float avoRatio;
	
	void avoMove()
	{
		
		var rot = tfBody.rotation;
		
		var move = rot * new Vector3( 0.0f, 0.0f, 1.0f );
		
	//	var avoRatio = 20.0f;
		
		avoRatio = avoRatio - 20.0f * Time.deltaTime;
		
		rb.MovePosition( rb.position + tfBody.forward * avoRatio * Time.deltaTime );
	}
	
	void FixedUpdate()
	{
		
		physMove();
		
	}
	
}




