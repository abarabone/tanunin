using UnityEngine;
using System.Collections;
using UnityEditor;


[CustomEditor(typeof(RoadCluster))]
public class RoadClusterInspector : Editor
{
	
	public override void OnInspectorGUI()
	{

		EditorGUILayout.BeginHorizontal();
		EditorGUILayout.LabelField("Editor Mesh");
		if( GUILayout.Button("create") )
		{
			createEditorMesh();
		}
		if( GUILayout.Button("destroy") )
		{
			destroyEditorMesh();
		}
		EditorGUILayout.EndHorizontal();

		EditorGUILayout.BeginHorizontal();
		EditorGUILayout.LabelField("Fitting Terrain");
		if( GUILayout.Button("on") )
		{
			fittingTerrain();
		}
		EditorGUILayout.EndHorizontal();


		base.OnInspectorGUI();
		
	}


	RoadCluster getRoadCluster()
	{
		var go = ((RoadCluster)target).gameObject;

		return go.GetComponent<RoadCluster>();
	}


	void createEditorMesh()
	{

		var cluster = getRoadCluster();

		cluster.buildPath();

	}

	void destroyEditorMesh()
	{
		
		var cluster = getRoadCluster();
		
		cluster.destroyEditorOnlyObjects();

	}

	void fittingTerrain()
	{

		var cluster = getRoadCluster();


		var tr = cluster.transform.parent.GetComponentInChildren<Terrain>();

		var field = new TerrainOperator( tr );


		var parts = cluster.GetComponentsInChildren<RoadPart>( true );

		foreach( var part in parts )
		{

			var mc = part.GetComponent<MeshCollider>();

			field.adjustMesh( mc );

		}

		tr.Flush();

	}
	
	
}
