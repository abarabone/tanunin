using UnityEngine;
using System.Collections;
using UnityEditor;


[CustomEditor(typeof(Plot))]
public class StructureInspector : Editor
{
	
	public override void OnInspectorGUI()
	{
		EditorGUILayout.BeginHorizontal();
		EditorGUILayout.LabelField("Editor Temporary Mesh");
		if( GUILayout.Button("create") )
		{
			createEditorMesh();
		}
		EditorGUILayout.EndHorizontal();
		
		base.OnInspectorGUI();
		
	}
	
	void createEditorMesh()
	{
		
		var go = ((Plot)target).gameObject;
		
		var prefab = (GameObject)Resources.Load( go.name );
		
		var nearTemplate = (GameObject)Instantiate( prefab.transform.GetChild(0).gameObject, go.transform.position, go.transform.rotation );
		
		
		var shader = Shader.Find("Custom/Transparent/Cutout/Diffuse");//nearTemplate.GetComponent<MeshRenderer>().sharedMaterial.shader;
		
		var csm = new CombineStructureMesh();
		
		csm.combineVisibilityMeshOnEditor( nearTemplate, shader );
		
		
		var ntf = nearTemplate.transform;
		
		ntf.parent = go.transform;
		
		nearTemplate.tag = "EditorOnly";
		
		nearTemplate.name = "editor near";
		
		nearTemplate.AddComponent<EditorOnlyObject>();
		
		
		for( var i = ntf.GetChildCount(); i-- > 0; )
		{
			DestroyImmediate( ntf.GetChild(i).gameObject );
		}
		
	}
	
	void setPartIds()
	{
		
		var plot = (Plot)target;
		
		var parts = plot.GetComponentsInChildren<PlotPart>( true );
		
		for( var i = 0; i < parts.Length; i++ )
		{
			
			
			
		}
		
	}
	
}
