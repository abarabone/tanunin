using UnityEngine;
using System.Collections;
using System.Collections.Generic;





public class Inputs : _Inputs
{
	
	enum enAction
	{
		transrate,
		rotation,
		
	}
	
	public void pollAll()
	{
		
		actions
		
	}
	
	public this[ int i ]
	{
		get
		{
			return actions[ i ];
		}
	}
	
}





public class _Inputs
{
	
//	protected Dictionary< string, InputActionUnit >	actions;
	protected InputActionUnit[]	actions;
	
	
	
	
}


struct InputActionUnit
{
	
	List<InputUnit>	inputs;
		
	
	
	void init( int inputLength )
	{
		inputs = new List<InputUnit>( inputLength );
	}
	
	
	
	bool getDigital()
	{
		bool res = false;
		
		foreach( var input in inputs )
		{
			res |= input.getDigital();
		}
		
		return res;
	}
	
	bool getDigitalDown()
	{
		bool res = false;
		
		foreach( var input in inputs )
		{
			res |= input.getDigitalDown();
		}
		
		return res;
	}
	
	bool getDigitalUp()
	{
		bool res = false;
		
		foreach( var input in inputs )
		{
			res |= input.getDigitalUp();
		}
		
		return res;
	}
	
	float getAnalog()
	{
		float res = 0.0f;
		
		foreach( var input in inputs )
		{
			res += input.getAnalog();
		}
		
		return Mathf.Clamp( res, -1.0f, 1.0f );
	}
	
	float getAnalogPlus()
	{
		float res = 0.0f;
		
		foreach( var input in inputs )
		{
			res += input.getAnalog();
		}
		
		return ( res > 1.0f )? 1.0f: res;
	}
	
	float getAnalogMinus()
	{
		float res = 0.0f;
		
		foreach( var input in inputs )
		{
			res += input.getAnalog();
		}
		
		return ( res < -1.0f )? -1.0f: res;
	}
	
}

struct InputUnit
{
	
	string	name;
	
	enType	type;
	
	enum enType
	{
		padButton,
		padStick,
		mouseMove,
		mouseButton,
		mouseKey
	}
	
	
	bool	preres;
	
	
	
	public bool getDigital()
	{
		bool	res = false;
		
		switch( type )
		{
			
			case enType.padButton:
			{
				res = Input.GetButton( name );
			}
			break;
			
			case enType.padStick:
			{
				res = Input.GetAxisRaw( name ) >= 0.8f;
			}
			break;
			
			default:break;
		}
		
		return res;
	}
	
	public bool getDigitalDown()
	{
		bool	res = false;
		
		switch( type )
		{
			
			case enType.padButton:
			{
				res = Input.GetButtonDown( name );
			}
			break;
			
			case enType.padStick:
			{
				bool nowres = Input.GetAxisRaw( name ) >= 0.8f;
				
				res = nowres ^ preres;
				
				preres = res;
			}
			break;
			
			default:break;
		}
		
		return res;
	}
	
	public bool getDigitalUp()
	{
		bool	res = false;
		
		switch( type )
		{
			
			case enType.padButton:
			{
				res = Input.GetButtonUp( name );
			}
			break;
			
			case enType.padStick:
			{
				bool nowres = Input.GetAxisRaw( name ) < 0.8f;
				
				res = nowres ^ preres;
				
				preres = res;
			}
			break;
			
			default:break;
		}
		
		return res;
	}
	
	public float getAnalog()
	{
		float	res = 0.0f;
		
		switch( type )
		{
			
			case enType.padStick:
			{
				res = Input.GetAxisRaw( name );
			}
			break;
			
			default:break;
		}
		
		return res;
	}
	
	public float getAnalogPlus()
	{
		float	res = 0.0f;
		
		switch( type )
		{
			
			case enType.padButton:
			{
				res = Input.GetButton( name )? 1.0f: 0.0f;
			}
			break;
			
			case enType.padStick:
			{
				res = Input.GetAxisRaw( name );
				
				res = res > 0.0f? res: 0.0f;
			}
			break;
			
			default:break;
		}
		
		return res;
	}
	
	public float getAnalogMinus()
	{
		float	res = 0.0f;
		
		switch( type )
		{
			
			case enType.padButton:
			{
				res = Input.GetButton( name )? -1.0f: 0.0f;
			}
			break;
			
			case enType.padStick:
			{
				res = Input.GetAxisRaw( name );
				
				res = res < 0.0f? res: 0.0f;
			}
			break;
			
			default:break;
		}
		
		return res;
	}
}








