using UnityEngine;
using System.Collections;

public abstract class _StructureBase2 : _HitProcessBase
{
	
	public Transform	tf		{ get; protected set; }

	
	public GameObject	near	{ get; protected set; }
	
	public StructureMeshRender2		nearRender	{ get; protected set; }
	

	public _StructurePartBase2[]	parts	{ get; protected set; }


	public StructureBreakController	breaker	{ get; protected set; }




	public virtual void init()
	{

		tf	= transform;
		
		breaker	= new StructureBreakController( this );

	}




	public override enType shot( float damage, float pressure, Vector3 direction, Vector3 point, int hitIndex, int teamFlag )
	{

		if( damage > 0.0f )
		{

			var partId	= breaker.triIdToPartId( hitIndex );


			if( nearRender.isVisible( partId ) )
			{

				var part = parts[ partId ];

				part.fallDown( breaker, pressure, direction, point );

			}

		}

		return enType.softStuff;

	}


/*	public void breakDirect( _StructurePartBase2 part, float pressure, Vector3 direction, Vector3 point )
	{

		breaker.breakProcess( part, pressure, direction, point );

	}
*/
	
	public virtual void destruct( bool playSound = false )
	// 破壊したい時はこれを呼ぶ
	{
		Destroy( gameObject, 2.0f );
	}


	
/*	
	public void checkDstroyPartCount( int id )
	{
		partsLength--;
		
		if( partsLength <= 0 )
		{
			Destroy( gameObject, 2.0f );
		}
		
		if( id == partsLength )
		{
			parts[id].childId = -1;
			
			parts[id] = null;
		}
		else
		{
			parts[id].childId = -1;
			
			parts[ partsLength ].childId = id;
			
			parts[id] = parts[ partsLength ];
			
			parts[ partsLength ] = null;
		}
		
	}
*/	






	// 遠近切り替え処理

	public abstract void switchToNear();
	public abstract void switchToFar();
	

}



public class StructureBreakController// クラスでないとデリゲートがコピー渡しになるっぽい…
{

	public _StructureBase2	structure;


	MeshCollider	nearCollider;


	public int		unbrokenPartsLength		{ get; private set; }

	public byte[]	triIndexToPartIdList	{ get; private set; }


	int[]	colliderTriangles;

	bool	isColliderBrokenInFrame;


	public StructureBreakController( _StructureBase2 s )
	{
		structure = s;
	}

	
	public void init( GameObject near, int partsLength, byte[] idList )
	{

		nearCollider	= near.GetComponent<MeshCollider>();
		

		unbrokenPartsLength		= partsLength;
		
		triIndexToPartIdList	= idList;

	}

	public int triIdToPartId( int triId )
	{
		return triIndexToPartIdList[ triId ];
	}


	public void breakProcess( _StructurePartBase2 part, float pressure, Vector3 direction, Vector3 point )
	{
		
		breakPart( part );

		unbrokenPartsLength--;
		

		if( unbrokenPartsLength == 0 ) structure.destruct();

	}
	
	void breakPart( _StructurePartBase2 part )
	{
		
		if( colliderTriangles == null )
		// 初回はメッシュ生成
		{
			
			var oldmesh = nearCollider.sharedMesh;
			var	newmesh = new Mesh();
			
			newmesh.vertices	= oldmesh.vertices;
			//	newmesh.triangles	= (int[])oldmesh.triangles.Clone();
			newmesh.MarkDynamic();
			
			nearCollider.sharedMesh = newmesh;
			
			
			colliderTriangles = oldmesh.triangles;	// これは実際には get で配列生成されてるっぽい
			
		}
		
		
		var end = part.triangleLength + part.startTriangle;
		
		for( var i = part.startTriangle; i < end; i++ )
		{
			
			var tri = i * 3;
			
			colliderTriangles[ tri + 0 ] = 0;
			colliderTriangles[ tri + 1 ] = 0;
			colliderTriangles[ tri + 2 ] = 0;
			
		}
		
		
		if( !isColliderBrokenInFrame )
		// フレーム中に複数回更新されるのをふせぐ
		{

			structure.StartCoroutine( applyBrokenCollider() );
			
		}
		
	}

	IEnumerator applyBrokenCollider()
	// 更新された破壊済みメッシュを適用する
	{

		isColliderBrokenInFrame = true;

		yield return new WaitForFixedUpdate();


		nearCollider.enabled = false;
		
		nearCollider.sharedMesh.triangles = colliderTriangles;

		nearCollider.enabled = true;


		isColliderBrokenInFrame = false;

	}

}

