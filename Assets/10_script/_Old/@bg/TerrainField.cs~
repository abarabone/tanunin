using UnityEngine;
using System.Collections;
using System; 

public class TerrainField : _HitProcessBase
{
	
	public Terrain			terrain		{ get; protected set; }
	public TerrainCollider	collider	{ get; protected set; }


	TerrainOperator	top;

	

	public void init( Terrain tr, TerrainCollider tc )
	{

		terrain		= tr;
		collider	= tc;

		top = new TerrainOperator( tr );

	}

	public override enType blasted( float damage, float pressure, float boringFactor, Vector3 center, float radius, int teamFlag )
	{
		collider.enabled	= false;

		top.adjustSphere( center, radius, boringFactor );

		terrain.Flush();
		
		collider.enabled	= true;

		return enType.softStuff;
	}

}





public struct Int2
{
	public int	x;
	public int	y;
	public Int2( int a, int b )
	{
		x = a;
		y = b;
	}
	static public Int2 ceil( Vector2 vc )
	{
		Int2 i;
		i.x = Mathf.CeilToInt( vc.x );
		i.y = Mathf.CeilToInt( vc.y );
		return i;
	}
	static public Int2 floor( Vector2 vc )
	{
		Int2 i;
		i.x = Mathf.FloorToInt( vc.x );
		i.y = Mathf.FloorToInt( vc.y );
		return i;
	}
	static public Int2 min( Int2 a, Int2 b )
	{
		var res = new Int2();
		res.x = ( a.x > b.x )? b.x: a.x;
		res.y = ( a.y > b.y )? b.y: a.y;
		return res;
	}
	static public Int2 max( Int2 a, Int2 b )
	{
		var res = new Int2();
		res.x = ( a.x < b.x )? b.x: a.x;
		res.y = ( a.y < b.y )? b.y: a.y;
		return res;
	}
	
}


public class SimpleTerrainOperator
{
	
	protected TerrainData	td;
	
	protected Vector2	fieldUnit;
	protected float		fieldUnitHeight;
	protected Vector2	fieldUnitR;
	protected float		fieldUnitHeightR;
	protected Int2		fieldLength;

	protected Vector2	terrainPosition;
	protected float		terrainPositionHeight;
	
	
	public SimpleTerrainOperator( Terrain terrain )
	{
		
		td	= terrain.terrainData;
		
		fieldUnit		= getFieldScale( terrain );
		fieldUnitHeight	= terrain.terrainData.heightmapScale.y;
		
		fieldUnitR		 = new Vector2( 1.0f / fieldUnit.x, 1.0f / fieldUnit.y );
		fieldUnitHeightR = 1.0f / fieldUnitHeight;

		terrainPosition			= getPosition( terrain );
		terrainPositionHeight	= terrain.GetPosition().y;
		
		fieldLength	= getFieldLength( terrain );
		
	}
	
	Int2 getFieldLength( Terrain terrain )
	{
		//	var unitLength	= terrain.terrainData.heightmapResolution;
		return new Int2( terrain.terrainData.heightmapWidth, terrain.terrainData.heightmapHeight );//unitLength, unitLength );
	}
	Vector2 getFieldScale( Terrain terrain )
	{
		var unitSize	= terrain.terrainData.heightmapScale;
		return new Vector2( unitSize.x, unitSize.z );
	}
	Vector2 getPosition( Terrain terrain )
	{
		var tpos	= terrain.GetPosition();
		return new Vector2( tpos.x, tpos.z );
	}
	
	
	public void adjustMesh( MeshCollider mc )
	{

		var min = new Vector2( mc.bounds.min.x, mc.bounds.min.z ) - terrainPosition;
		var max = new Vector2( mc.bounds.max.x, mc.bounds.max.z ) - terrainPosition;
		
		
		var m = new FieldManipulator( min, max, fieldUnitR, fieldLength );
		
		var hs = m.getHeights( td );
		var ms = m.getAlphamaps( td );
		
		var tofs = new Vector3( terrainPosition.x, terrainPositionHeight, terrainPosition.y );
		
		for( var iy = 0; iy < m.len.y; iy++ )
			for( var ix = 0; ix < m.len.x; ix++ )
		{
			
			var pos = m.getIterationPosition3d( ix, iy, fieldUnit ) + tofs;
			
			var start	= pos + Vector3.up * 512.0f;
			var end		= pos + Vector3.down * 512.0f;
			
			var ray = new Ray( start, end - start );
			var res = new RaycastHit();
			if( mc.Raycast( ray, out res, 1024.0f ) )
			{
				
				hs[ iy, ix ] = ( res.point.y - terrainPositionHeight ) * fieldUnitHeightR;
				
				ms[ iy, ix, 0 ] = 0.0f;
				ms[ iy, ix, 1 ] = 1.0f;
				ms[ iy, ix, 2 ] = 0.0f;
				ms[ iy, ix, 3 ] = 0.0f;

			}
			
		}
		
		m.setHeights( td, hs );
		m.setAlphamaps( td, ms );

	}
	
	
	public void adjustSphere( Vector3 center, float radius, float impact )
	{
		
		var sqrradius = radius * radius;
		var sradius	= new Vector2( radius, radius );
		
		var scenter = new Vector2( center.x, center.z ) - terrainPosition;
		var centerHeight = center.y - terrainPositionHeight;
		
		center = new Vector3( scenter.x, centerHeight, scenter.y );
		
		var min = scenter - sradius;
		var max = scenter + sradius;
		
		
		var sqrradiusR	= 1.0f / sqrradius;
		
		var m = new FieldManipulator( min, max, fieldUnitR, fieldLength );
		
		var hs = m.getHeights( td );
		var ms = m.getAlphamaps( td );

		for( var iy = 0; iy < m.len.y; iy++ )
		for( var ix = 0; ix < m.len.x; ix++ )
		// 地形ローカル空間で処理
		{
			
			var height = hs[ iy, ix ] * fieldUnitHeight;
			
			var pos = m.getIterationPosition3d( ix, iy, fieldUnit, height );
			
			var spos = new Vector2( pos.x, pos.z );
			
			if( height > centerHeight )
			{
				var sqrsdist = ( spos - scenter ).sqrMagnitude;
				
				if( sqrsdist <= sqrradius )
				{
					var hith = centerHeight - ( sqrradius - sqrsdist ) * impact;
					
					hs[ iy, ix ] = Mathf.Lerp( hith, height, ( sqrsdist * sqrradiusR ) ) * fieldUnitHeightR;
					
					ms[ iy, ix, 0 ] = 0.3f;
					ms[ iy, ix, 1 ] = 0.0f;
					ms[ iy, ix, 2 ] = 0.0f;
					ms[ iy, ix, 3 ] = 0.0f;
				}
			}
			else
			{
				if( ( pos - center ).sqrMagnitude <= sqrradius )
				{
					var hith = centerHeight - ( sqrradius - ( scenter - spos ).sqrMagnitude ) * impact;
					
					hs[ iy, ix ] = ( hith < height? hith: height ) * fieldUnitHeightR;
					
					ms[ iy, ix, 0 ] = 0.3f;
					ms[ iy, ix, 1 ] = 0.0f;
					ms[ iy, ix, 2 ] = 0.0f;
					ms[ iy, ix, 3 ] = 0.0f;
				}
			}
		}
		
		m.setHeights( td, hs );
		m.setAlphamaps( td, ms );

	}
	
	
}

public class TerrainOperator : SimpleTerrainOperator
{

	protected Vector2	mapUnit;
	protected Vector2	mapUnitR;
	protected Int2		mapLength;


	public TerrainOperator( Terrain terrain ) : base( terrain )
	{

		mapUnit		= getMapScale( terrain );
		mapUnitR	= new Vector2( 1.0f / mapUnit.x, 1.0f / mapUnit.y );
		mapLength	= getMapLength( terrain );

	}

	Int2 getMapLength( Terrain terrain )
	{
		var unitLength	= terrain.terrainData.alphamapHeight;
		return new Int2( unitLength, unitLength );
	}
	Vector2 getMapScale( Terrain terrain )
	{
		var unitSize	= terrain.terrainData.size / (float)terrain.terrainData.alphamapResolution;
		return new Vector2( unitSize.x, unitSize.z );
	}

	
	public void adjustMesh( MeshCollider mc )
	{

		var min = new Vector2( mc.bounds.min.x, mc.bounds.min.z ) - terrainPosition;
		var max = new Vector2( mc.bounds.max.x, mc.bounds.max.z ) - terrainPosition;
		

		var m = new FieldManipulator( min, max, fieldUnitR, fieldLength );

		var hs = m.getHeights( td );

		var tofs = new Vector3( terrainPosition.x, terrainPositionHeight, terrainPosition.y );

		for( var iy = 0; iy < m.len.y; iy++ )
		for( var ix = 0; ix < m.len.x; ix++ )
		{
			
			var pos = m.getIterationPosition3d( ix, iy, fieldUnit ) + tofs;

			var start	= pos + Vector3.up * 512.0f;
			var end		= pos + Vector3.down * 512.0f;
			
			var ray = new Ray( start, end - start );
			var res = new RaycastHit();
			if( mc.Raycast( ray, out res, 1024.0f ) )
			{
				
				hs[ iy, ix ] = ( res.point.y - terrainPositionHeight ) * fieldUnitHeightR;
				
			}
			
		}
		
		m.setHeights( td, hs );


		m = new FieldManipulator( min, max, mapUnitR, mapLength );

		var ms = m.getAlphamaps( td );

		for( var iy = 0; iy < m.len.y; iy++ )
		for( var ix = 0; ix < m.len.x; ix++ )
		{

			var pos = m.getIterationPosition3d( ix, iy, mapUnit ) + tofs;

			var start	= pos + Vector3.up * 512.0f;
			var end		= pos + Vector3.down * 512.0f;
			
			var ray = new Ray( start, end - start );
			var res = new RaycastHit();
			if( mc.Raycast( ray, out res, 1024.0f ) )
			{

				ms[ iy, ix, 0 ] = 0.0f;
				ms[ iy, ix, 1 ] = 1.0f;
				ms[ iy, ix, 2 ] = 0.0f;
				ms[ iy, ix, 3 ] = 0.0f;

			}

		}

		m.setAlphamaps( td, ms );

	}


	public void adjustSphere( Vector3 center, float radius, float impact )
	{

		var sqrradius = radius * radius;
		var sradius	= new Vector2( radius, radius );

		var scenter = new Vector2( center.x, center.z ) - terrainPosition;
		var centerHeight = center.y - terrainPositionHeight;

		center = new Vector3( scenter.x, centerHeight, scenter.y );

		var min = scenter - sradius;
		var max = scenter + sradius;


//		var ratio = new Vector2( fieldUnit.x / mapUnit.x, fieldUnit.y / mapUnit.y );//

		var sqrradiusR	= 1.0f / sqrradius;

		var m = new FieldManipulator( min, max, fieldUnitR, fieldLength );
//		var ma = new FieldManipulator( min, max, mapUnitR, mapLength );//

		var hs = m.getHeights( td );
//		var ms = ma.getAlphamaps( td );//

		for( var iy = 0; iy < m.len.y; iy++ )
		for( var ix = 0; ix < m.len.x; ix++ )
		// 地形ローカル空間で処理
		{
			
			var height = hs[ iy, ix ] * fieldUnitHeight;
			
			var pos = m.getIterationPosition3d( ix, iy, fieldUnit, height );

			var spos = new Vector2( pos.x, pos.z );

			if( height > centerHeight )
			{
				var sqrsdist = ( spos - scenter ).sqrMagnitude;

				if( sqrsdist <= sqrradius )
				{
					var hith = centerHeight - ( sqrradius - sqrsdist ) * impact;

					hs[ iy, ix ] = Mathf.Lerp( hith, height, ( sqrsdist * sqrradiusR ) ) * fieldUnitHeightR;

				/*	var imy = (int)(iy * ratio.y);
					var imx = (int)(ix * ratio.x);
					ms[ imy, imx, 0 ] = 0.3f;
					ms[ imy, imx, 1 ] = 0.0f;
					ms[ imy, imx, 2 ] = 0.0f;
					ms[ imy, imx, 3 ] = 0.0f;*/
				}
			}
			else
			{
				if( ( pos - center ).sqrMagnitude <= sqrradius )
				{
					var hith = centerHeight - ( sqrradius - ( scenter - spos ).sqrMagnitude ) * impact;

					hs[ iy, ix ] = ( hith < height? hith: height ) * fieldUnitHeightR;
					
				/*	var imy = (int)(iy * ratio.y);
					var imx = (int)(ix * ratio.x);
					ms[ imy, imx, 0 ] = 0.3f;
					ms[ imy, imx, 1 ] = 0.0f;
					ms[ imy, imx, 2 ] = 0.0f;
					ms[ imy, imx, 3 ] = 0.0f;*/
				}
			}
		}

		m.setHeights( td, hs );
	//	ma.setAlphamaps( td, ms );//
		

		var ratio = new Vector2( fieldUnit.x / mapUnit.x, fieldUnit.y / mapUnit.y );

		m = new FieldManipulator( min, max, mapUnitR, mapLength );

		var ms = m.getAlphamaps( td );
		
		for( var iy = 0; iy < m.len.y; iy++ )
		for( var ix = 0; ix < m.len.x; ix++ )
		{

			var spos = m.getIterationPosition( ix, iy, mapUnit );

			var height = hs[ (int)(iy * ratio.y), (int)(ix * ratio.x) ] * fieldUnitHeight;

			var pos = new Vector3( spos.x, height, spos.y );

			if( ( pos - center ).sqrMagnitude <= sqrradius )
			{
				ms[ iy, ix, 0 ] = 0.3f;
				ms[ iy, ix, 1 ] = 0.0f;
				ms[ iy, ix, 2 ] = 0.0f;
				ms[ iy, ix, 3 ] = 0.0f;
			}
			
		}
		
		m.setAlphamaps( td, ms );

	}


}




public struct FieldManipulator
{

	public Int2	st		{ get; private set; }	// テレイン上の開始インデックス
	public Int2	ed		{ get; private set; }	// テレイン上の終了インデックス
	
	public Int2	len		{ get; private set; }	// テレイン上の繰り返し回数


	public FieldManipulator( Vector2 min, Vector2 max, Vector2 unitR, Int2 length )
	{
		
		st = Int2.floor( Vector2.Scale( min, unitR ) );
		ed = Int2.ceil( Vector2.Scale( max, unitR ) );
		
		st = Int2.max( new Int2(), st );
		ed = Int2.min( ed, new Int2( length.x - 1, length.y - 1 ) );
		
		len = new Int2( ed.x - st.x + 1, ed.y - st.y + 1 );

	}


	public float[,] getHeights( TerrainData td )
	{
		return td.GetHeights( st.x, st.y, len.x, len.y );
	}

	public float[,] getBrankHeights()
	{
		return new float[ len.y, len.x ];
	}

	public void setHeights( TerrainData td, float[,] hs )
	{
		td.SetHeights( st.x, st.y, hs );
	}


	public float[,,] getAlphamaps( TerrainData td )
	{
		return td.GetAlphamaps( st.x, st.y, len.x, len.y );
	}

	public void setAlphamaps( TerrainData td, float[,,] ms )
	{
		td.SetAlphamaps( st.x, st.y, ms );
	}


	public Vector2 getIterationPosition( int ix, int iy, Vector2 unit )
	{
		return new Vector2( (float)( st.x + ix ) * unit.x, (float)( st.y + iy ) * unit.y );
	}

	public Vector3 getIterationPosition3d( int ix, int iy, Vector2 unit, float h = 0.0f )
	{
		return new Vector3( (float)( st.x + ix ) * unit.x, h, (float)( st.y + iy ) * unit.y );
	}

}













