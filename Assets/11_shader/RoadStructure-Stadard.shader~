

Shader "Custom/Road/Structure-Standard"
{
	
	Properties
	{
		_MainTex ("Base (RGB)", 2D) = "white" {}
	}
	
	
	SubShader
	{
		Tags { "RenderType"="Opaque" }
		
		LOD 200
		
		Pass
	    {
			Lighting Off
			LOD 200
			
			Tags
			{
				"Queue"="Geometry"
				"IgnoreProjector"="False"
				"RenderType"="Opaque"
				"LightMode"="Vertex"
			}
			
			Cull Back
			ZWrite On
			ZTest LEqual
			ColorMask RGBA
			Fog {}
			Offset	-1, -1
			
			CGPROGRAM
				#pragma only_renderers d3d9 opengl gles
				#pragma glsl
				#pragma vertex vert4
				#pragma fragment frag
			//	#pragma target 3.0
				
				#include "UnityCG.cginc"
				
				struct vtxpos
				{
					half4	vertex : POSITION;
					half3	normal : NORMAL;
				    half2	texcoord : TEXCOORD0;
				    half4	color : COLOR;
				};
				
				struct v2f
				{
				    half4	pos : SV_POSITION;
				    half2	uv : TEXCOORD0;
				    half4	color : COLOR;
				};
				
				
				v2f vert0( vtxpos v )
				{
				    v2f o;
				    o.pos = mul( UNITY_MATRIX_MVP, v.vertex );
				    o.uv = v.texcoord;
				    return o;
				}
				
				
				v2f vert1(
					vtxpos v,
					uniform float4	cxs[1],
					uniform float4	cys[1],
					uniform float4	czs[1],
					uniform float4x4	mtPxV
				)
				{
				    v2f o;
				    
				    int i = v.color.a * 255;
				   
				    float3	pos;
				    pos.x = dot( v.vertex, cxs[i] );
				    pos.y = dot( v.vertex, cys[i] );
				    pos.z = dot( v.vertex, czs[i] );
				    
				    o.pos = mul( mtPxV, float4(pos,1) );
				    
				    o.uv = v.texcoord;
				    
				    return o;
				}
				
				
				fixed3 rot( fixed3 v, fixed4 q )
				{
					fixed3	qv = cross( v, q.xyz ) - v * q.w;
					return v + 2.0f * cross( qv, q.xyz );
				}
				
				v2f vert2(
					vtxpos v,
					uniform	float	f[240],
					uniform fixed4x4	mtPxV,
					uniform fixed4	r[1],
					uniform fixed4	t[1]
				)
				{
				    v2f o;
				    
				    int i = v.color.a * 255;
				   	
				   	half3	pos;
				   	pos = rot( v.vertex.xyz, r[i] );
				   	pos = pos + t[i].xyz;
				   	pos *= t[i].w;
				   	
					o.pos = mul( mtPxV, fixed4(pos,1) );
				//	o.pos = mul( UNITY_MATRIX_MVP, fixed4(pos,1) );
				    
				    o.uv = v.texcoord;
				    
				    o.color.a	= f[i];
				    
				    return o;
				}
				
				half3 iShadeVertexLights( half4 vertex, half3 normal )
				{
					half3 viewpos = mul( UNITY_MATRIX_MV, vertex ).xyz;
					half3 viewN = mul( (half3x3)UNITY_MATRIX_MV, normal );
					half3 lightColor = UNITY_LIGHTMODEL_AMBIENT.xyz;
					
					half3 toLight = unity_LightPosition[0].xyz - viewpos.xyz * unity_LightPosition[0].w;
					half lengthSq = dot( toLight, toLight );
					half atten = 1.0 / ( 1.0 + lengthSq * unity_LightAtten[0].z );
					half diff = max( 0, dot(viewN, normalize(toLight)) );
					lightColor += unity_LightColor[0].rgb * (diff * atten);
					
					return lightColor;
				}
				
				v2f vert4(
					vtxpos			p,
					uniform half	v[230]
				)
				{
					
					int i = p.color.a * 255;
					
					v2f o;
					
					o.pos = mul( UNITY_MATRIX_MVP, p.vertex ) * v[i];
					o.color.rgb = iShadeVertexLights( p.vertex, p.normal );
					o.uv = p.texcoord;
					
					return o;
				}
				
				fixed4 frag(
					v2f i,
					uniform sampler2D _MainTex
				) : COLOR
				{
				    fixed4 texcol = tex2D( _MainTex, i.uv );
				    return texcol * i.color;
				}
				
			ENDCG
			
	    }
	 	
	}
	
}
