

Shader "Custom/SkinnedMesh_1bone_nolit"
{
	
	Properties
	{
		_MainTex ("Base (RGB) Gloss (A)", 2D) = "white" {}
		_Color ("Main Color", Color) = (1,1,1,1)
		_SpecColor ("Specular Color", Color) = (0.5, 0.5, 0.5, 1)
		_Shininess ("Shininess", Range (0.01, 1)) = 0.078125
	}
	
	
	SubShader
	{
		Tags { "RenderType"="Opaque" }
		
		LOD 200
		
		Pass
	    {
			Lighting Off
			LOD 200
			
			Tags
			{
				"Queue"="Geometry"
				"IgnoreProjector"="False"
				"RenderType"="Opaque"
		//		"LightMode"="Vertex"
			}
			
			Cull Back
			ZWrite On
			ZTest LEqual
			ColorMask RGBA
			Fog {}
			
			CGPROGRAM
				#pragma only_renderers d3d9 opengl gles
				#pragma glsl
				#pragma vertex vert3
				#pragma fragment frag
			//	#pragma target 3.0
				
				struct vtxpos
				{
					half4	vertex : POSITION;
				    half2	texcoord : TEXCOORD0;
				    half4	color : COLOR;
				};
				
				struct v2f
				{
				    half4	pos : SV_POSITION;
				    half2	uv : TEXCOORD0;
				    half4	color : COLOR;
				};
								
				
				half3 rot( half3 v, half4 q )
				{
					half3	qv = cross( v, q.xyz ) - v * q.w;
					return v + 2.0f * cross( qv, q.xyz );
				}
				
				v2f vert2(
					vtxpos p,
					uniform fixed4	r[125],
					uniform fixed4	t[125]
				)
				{
				    v2f o;
				    
				    int i = p.color.a * 255;
				   	
				   	half3	rpos = rot( p.vertex.xyz, r[i] );
				   	half4	tpos = half4( rpos, 0.0f ) + t[i];
				   	
					o.pos = mul( UNITY_MATRIX_MVP, tpos );
				    
				    o.uv = p.texcoord;
				    
				    return o;
				}
				
				
				v2f vert3(
					vtxpos	p,
					uniform half4	_Color,
					uniform half4x4	m[32]
				)
				{
					v2f o;
					
					int i = p.color.x * 255;
					
					half4	pos = mul( m[i], p.vertex );
					
					o.pos = mul( UNITY_MATRIX_VP, pos );
					
					o.uv = p.texcoord;
					
					o.color = _Color;
					
					return o;
				}
				
				
				
				
				fixed4 frag(
					v2f i,
					uniform sampler2D _MainTex
				) : COLOR
				{
				    fixed4 texcol = tex2D(_MainTex, i.uv);
				    return texcol * i.color;
				}
				
			ENDCG
			
	    }
	    
	}
	
}
