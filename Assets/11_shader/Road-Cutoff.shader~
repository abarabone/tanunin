Shader "Custom/Road-Cutout"
{
	
	Properties
	{
		_MainTex ("Base (RGB)", 2D) = "white" {}
		_Cutoff ("Alpha cutoff", Range(0,1)) = 0.5
	}
	
	
	SubShader
	{
		Tags { "Queue"="AlphaTest" "IgnoreProjector"="False" "RenderType"="TransparentCutout" }
		
		LOD 200
		
		Pass
	    {
			Lighting Off
			LOD 200
			
			Tags { "Queue"="AlphaTest" "IgnoreProjector"="False" "RenderType"="TransparentCutout" }
			
			AlphaTest Greater 0.5
			Cull Back
			ZWrite On
			ZTest LEqual
			ColorMask RGBA
			Fog {}
			
			CGPROGRAM
				#pragma only_renderers d3d9 opengl gles
				#pragma glsl
				#pragma vertex vert
				#pragma fragment frag alphatest:_Cutoff
			//	#pragma target 3.0
				
				#include "UnityCG.cginc"
				
				struct vtxpos
				{
					half4	vertex : POSITION;
					half3	normal : NORMAL;
				    half2	texcoord : TEXCOORD0;
				    half4	color : COLOR;
				};
				
				struct v2f
				{
				    half4	pos : SV_POSITION;
				    half2	uv1 : TEXCOORD0;
				    half4	color : COLOR;
				};
				
				
				half3 iShadeVertexLights( half4 vertex, half3 normal )
				{
					half3 viewpos = mul( UNITY_MATRIX_MV, vertex ).xyz;
					half3 viewN = mul( (half3x3)UNITY_MATRIX_MV, normal );
					half3 lightColor = UNITY_LIGHTMODEL_AMBIENT.xyz;
					
					half3 toLight = unity_LightPosition[0].xyz - viewpos.xyz * unity_LightPosition[0].w;
					half lengthSq = dot( toLight, toLight );
					half atten = 1.0 / ( 1.0 + lengthSq * unity_LightAtten[0].z );
					half diff = max( 0, dot(viewN, normalize(toLight)) );
					lightColor += unity_LightColor[0].rgb * (diff * atten);
					
					return lightColor;
				}
				
				v2f vert( vtxpos p )
				{
					
					v2f o;
					
					o.pos = mul( UNITY_MATRIX_MVP, p.vertex );
					o.color.rgb = iShadeVertexLights( p.vertex, p.normal );
					o.uv1 = p.texcoord;
					
					return o;
				}
				
				fixed4 frag(
					v2f i,
					uniform sampler2D _MainTex
				) : COLOR
				{
					fixed4 mcol = tex2D(_MainTex, i.uv1);
					
				//	fixed4	isnotblack	= fixed4( ceil( mcol.rgb ), 1.0f );
				//	fixed4	isblack		= abs( isnotblack - 1.0f );
				//	return ( isnotblack * mcol ) + ( isblack * rcol ) * i.color;
					
					return mcol;// * i.color;
				}
				
			ENDCG
			
	    }
	}
	
}
